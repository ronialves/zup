package com.tlf.oss.resourceinventory.tbs.core;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.resourceinventory.tbs.core.validation.NetworkInfo;
import com.tlf.oss.resourceinventory.tbs.core.validation.ValidatorEntity;
import com.tlf.oss.resourceinventory.schemas.AtomicNetworkAddress;
import com.tlf.oss.resourceinventory.schemas.Cabinet;
import com.tlf.oss.resourceinventory.schemas.IPAddress;
import com.tlf.oss.resourceinventory.schemas.LogicalResource;
import com.tlf.oss.resourceinventory.schemas.LogicalResourceAssociation;
import com.tlf.oss.resourceinventory.schemas.NetworkAddressAssociation;
import com.tlf.oss.resourceinventory.schemas.NetworkRoute;
import com.tlf.oss.resourceinventory.schemas.NetworkRouteAssociation;
import com.tlf.oss.resourceinventory.schemas.PhysicalPort;
import com.tlf.oss.resourceinventory.schemas.PortAdapterCard;
import com.tlf.oss.resourceinventory.schemas.ResourceCharacteristicSpecification;
import com.tlf.oss.resourceinventory.schemas.ResourceFacingService;
import com.tlf.oss.resourceinventory.schemas.ResourceOrder;
import com.tlf.oss.resourceinventory.schemas.ResourceOrderItem;
import com.tlf.oss.resourceinventory.schemas.ServiceDescribedBy;
import com.tlf.oss.resourceinventory.schemas.ServiceSpecCharDescribes;
import com.tlf.oss.resourceinventory.schemas.Shelf;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;
import com.tlf.oss.resourceinventory.tbs.entity.NetworkInfoEntity;
import com.tlf.oss.resourceinventory.tbs.enums.RetrieveInfoType;
import com.tlf.oss.resourceinventory.tbs.repository.NetworkInfoRepository;

public class NetworkInfoController extends ValidatorEntity implements Serializable {

	private static final long serialVersionUID = 1L;

	@Inject
	public NetworkInfoRepository networkInfoRepository;
	
	public ResourceInventoryEntity getRetrieve(@NetworkInfo ResourceInventoryEntity entity) throws OSSBusinessException {

        ResourceInventoryEntity retrieveNetworkInfoResult = null;
        ResourceFacingService resourceFacingService = entity.getResourceFacingService();
        String serviceId = resourceFacingService.getServiceId();
        String status = resourceFacingService.getStatus();

        NetworkInfoEntity networkInfoEntity = networkInfoRepository.getRetrieveNetworkInfo(serviceId, status);
        
        Integer document = null;
        
        if (networkInfoEntity != null && networkInfoEntity.getErro() == 0) {
        	
            if (hasDocument(entity)) {
                document = Integer.parseInt(entity.getResourceOrder().getResourceOrderItem().getId());
            }
            
            networkInfoEntity.setCircuitActivityInd(status);

            retrieveNetworkInfoResult = getResourceInventoryEntity(networkInfoEntity, RetrieveInfoType.RETRIEVE_NETWORK_INFO, document);
        } else if (networkInfoEntity != null) {
            String msg =  RetrieveInfoType.RETRIEVE_NETWORK_INFO.toString() + ": " + networkInfoEntity.getMsg();
            throw new OSSBusinessException("ERRO: " + networkInfoEntity.getErro(), "RITBS-001", "" + msg);
        }
        return retrieveNetworkInfoResult;
    }

	private boolean hasDocument(ResourceInventoryEntity entity) {
		if (entity.getResourceOrder() != null && entity.getResourceOrder().getResourceOrderItem() != null
				&& entity.getResourceOrder().getResourceOrderItem().getId() != null
						&& !entity.getResourceOrder().getResourceOrderItem().getId().equals("")) {
			return true;
		} else {
			return false;
		}
	}

	public ResourceInventoryEntity getResourceInventoryEntity(NetworkInfoEntity entity, RetrieveInfoType retrieveInfoType, Integer document)
            throws OSSBusinessException {

        ResourceInventoryEntity result = createInstance();

        result.getCabinet().getHasShelves().get(0).setSlotId(null != entity.getSlot() ? entity.getSlot() : null);
        result.getCabinet().getHasShelves().get(0).getHasCards().get(0).getContainsPorts().get(0).setId(null != entity.getPortaFisica() ? entity.getPortaFisica() : null);
        result.getCabinet().getHasShelves().get(0).getHasCards().get(0).getContainsPorts().get(0).getLogicalResourceAssociation().getLogicalResource().get(0).getNetworkRouteAssociation().getNetworkRoute().get(0).setVirtualPort(String.valueOf(null != entity.getPortaLogica() ? entity.getPortaLogica() : null));
        result.getCabinet().getHasShelves().get(0).getHasCards().get(0).getContainsPorts().get(0).getLogicalResourceAssociation().getLogicalResource().get(0).getNetworkRouteAssociation().getNetworkRoute().get(0).setType("INTERNET");

        if(null != entity.getV5id()) {
            ResourceCharacteristicSpecification rce = new ResourceCharacteristicSpecification();
            rce.setId("V5ID");
            rce.setValue(null != entity.getV5id() ? entity.getV5id() : null);
            result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications().add(rce);
        }
        result.getCabinet().getHasShelves().get(0).getHasCards().get(0).setModel(null != entity.getModeloPlaca() ? entity.getModeloPlaca() : null);
        if(null != entity.getNameDslam()) {
            result.getCabinet().getHasShelves().get(0).getNetworkAddressAssociation().getAtomicNetworkAddress().setHostname(null != entity.getNameDslam() ? entity.getNameDslam() : null);
        }
        if(null != entity.getRin()) {
            LogicalResourceAssociation lra = new LogicalResourceAssociation();
            List<LogicalResource> lrs = new ArrayList<LogicalResource>();
            LogicalResource lr = new LogicalResource();
            NetworkRouteAssociation nra = new NetworkRouteAssociation();
            List<NetworkRoute> nrs = new ArrayList<NetworkRoute>();
            NetworkRoute nr = new NetworkRoute();
            nrs.add(nr);
            nra.getNetworkRoute().addAll(nrs);
            lr.setNetworkRouteAssociation(nra);
            lrs.add(lr);
            lra.getLogicalResource().addAll(lrs);
            result.getCabinet().getHasShelves().get(0).setLogicalResourceAssociation(lra);
            result.getCabinet().getHasShelves().get(0).getLogicalResourceAssociation().getLogicalResource().get(0).getNetworkRouteAssociation().getNetworkRoute().get(0).setVlanId(null != entity.getRin() ? entity.getRin() : null);
        }
        if(null != entity.getSvlan()) {
            ResourceCharacteristicSpecification rce = new ResourceCharacteristicSpecification();
            rce.setId("SVLAN");
            rce.setValue(null != entity.getSvlan() ? entity.getSvlan() : null);
            result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications().add(rce);
        }

        if(null != entity.getSvlan()) {
            ResourceCharacteristicSpecification rce = new ResourceCharacteristicSpecification();
            rce.setId("CVLAN");
            rce.setValue(null != entity.getCvlan() ? entity.getCvlan() : null);
            result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications().add(rce);
        }
        if (entity.getExternalNetworkOwner() != null) {
            ResourceCharacteristicSpecification eno = new ResourceCharacteristicSpecification();
            eno.setId("EXTERNAL_NETWORK_OWNER");
            eno.setValue(entity.getExternalNetworkOwner());
            result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications().add(eno);
        }

        ServiceDescribedBy sdb = new ServiceDescribedBy();
        sdb.setName("BROADBANDVELOCITY");
        result.getResourceFacingService().getServiceDescribedBy().add(sdb);

        if(null != entity.getDownstream()) {
            ServiceSpecCharDescribes sscd = new ServiceSpecCharDescribes();
            sscd.setId("DOWNLOAD");
            sscd.setValue(null != entity.getDownstream() ? entity.getDownstream() :null);
            result.getResourceFacingService().getServiceDescribedBy().get(0).getServiceSpecCharDescribes().add(sscd);
        }
        if(null != entity.getUpstream()) {
            ServiceSpecCharDescribes sscd = new ServiceSpecCharDescribes();
            sscd.setId("UPLOAD");
            sscd.setValue(null != entity.getUpstream() ? entity.getUpstream() :null);
            result.getResourceFacingService().getServiceDescribedBy().get(0).getServiceSpecCharDescribes().add(sscd);
        }
        if(entity.getVendorName() != null) {
            
            boolean alreadyHasVendor = false;
            
            if (result.getCabinet() != null && result.getCabinet().getHasShelves() != null && 
                result.getCabinet().getHasShelves().size() > 0 && 
                result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications() != null) {
                
                for (ResourceCharacteristicSpecification spec : result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications()) {
                    if ("VENDOR".equals(spec.getId())) {
                        alreadyHasVendor = true;
                        break;
                    }
                } 
            }
            if (!alreadyHasVendor) {                    
                ResourceCharacteristicSpecification rce = new ResourceCharacteristicSpecification();
                rce.setId("VENDOR");
                rce.setValue(null != entity.getVendorName() ? entity.getVendorName() : null);
                result.getCabinet().getHasShelves().get(0).getResourceCharacteristicSpecifications().add(rce);
            }
        }

        result.getResourceOrder().getResourceOrderItem().setId(null != String.valueOf(document) ? String.valueOf(document) : null);
        result.getCabinet().getHasShelves().get(0).setTypeOfResource(null != entity.getTypeOfResource() ? entity.getTypeOfResource() : null);
        result.getCabinet().getHasShelves().get(0).getIpController().setNetworkNumber(null != entity.getIpAddress() ? entity.getIpAddress() : null);
        result.getResourceFacingService().setServiceId(null != entity.getInstancia() ? entity.getInstancia() : null);
        result.getResourceFacingService().setStatus(null != entity.getCircuitActivityInd() ? entity.getCircuitActivityInd() : null);
        return result;
    }

	/**
	 * Cria uma instancia do ResourceInventoryEntity para retorno
	 * 
	 * @return ResourceInventoryEntity
	 */
	private ResourceInventoryEntity createInstance() {
		
		ResourceInventoryEntity result = new ResourceInventoryEntity();

		ResourceOrder resourceOrder = new ResourceOrder();
		ResourceOrderItem resourceOrderItem = new ResourceOrderItem();
		resourceOrder.setResourceOrderItem(resourceOrderItem);
		result.setResourceOrder(resourceOrder);

		Cabinet cabinet = new Cabinet();
		List<Shelf> hasShelves = new ArrayList<Shelf>();
		Shelf shelf = new Shelf();
		NetworkAddressAssociation networkAddressAssociation = new NetworkAddressAssociation();
		AtomicNetworkAddress atomicNetworkAddress = new AtomicNetworkAddress();
		List<ResourceCharacteristicSpecification> resourceCharacteristicSpecifications = new ArrayList<ResourceCharacteristicSpecification>();
		IPAddress ipController = new IPAddress();
		List<PortAdapterCard> hasCards = new ArrayList<PortAdapterCard>();
		PortAdapterCard portAdapterCard = new PortAdapterCard();
		List<PhysicalPort> containsPorts = new ArrayList<PhysicalPort>();
		PhysicalPort physicalPort = new PhysicalPort();
		LogicalResourceAssociation logicalResourceAssociation = new LogicalResourceAssociation();
		List<LogicalResource> logicalResources = new ArrayList<LogicalResource>();
		LogicalResource LogicalResource = new LogicalResource();
		NetworkRouteAssociation networkRouteAssociation = new NetworkRouteAssociation();
		List<NetworkRoute> networkRoutes = new ArrayList<NetworkRoute>();
		NetworkRoute networkRoute = new NetworkRoute();
		networkRoutes.add(networkRoute);
		networkRouteAssociation.getNetworkRoute().addAll(networkRoutes);
		LogicalResource.setNetworkRouteAssociation(networkRouteAssociation);
		logicalResources.add(LogicalResource);
		logicalResourceAssociation.getLogicalResource().addAll(logicalResources);
		physicalPort.setLogicalResourceAssociation(logicalResourceAssociation);
		containsPorts.add(physicalPort);
		portAdapterCard.setContainsPorts(containsPorts);
		hasCards.add(portAdapterCard);
		shelf.setIpController(ipController);
		shelf.setHasCards(hasCards);
		shelf.setResourceCharacteristicSpecifications(resourceCharacteristicSpecifications);
		networkAddressAssociation.setAtomicNetworkAddress(atomicNetworkAddress);
		shelf.setNetworkAddressAssociation(networkAddressAssociation);
		shelf.setLogicalResourceAssociation(logicalResourceAssociation);
		hasShelves.add(shelf);
		cabinet.setHasShelves(hasShelves);
		result.setCabinet(cabinet);
		
		ResourceFacingService resourceFacingService = new ResourceFacingService();
		List<ServiceDescribedBy> serviceDescribedBy = new ArrayList<ServiceDescribedBy>();
		resourceFacingService.setServiceDescribedBy(serviceDescribedBy);
		result.setResourceFacingService(resourceFacingService);
		
		return result;
	}
	
}
