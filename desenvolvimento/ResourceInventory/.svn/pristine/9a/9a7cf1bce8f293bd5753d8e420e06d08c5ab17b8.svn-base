package com.tfl.oss.resourceinventory.granite.execution

import java.util.ArrayList;
import java.util.List;

import com.tlf.oss.resourceinventory.granite.core.entity.Rules;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;
import com.tlf.oss.resourceinventory.schemas.CustomerFacingService;
import com.tlf.oss.resourceinventory.schemas.ServiceDescribedBy;
import com.tlf.oss.resourceinventory.schemas.ServiceSpecCharDescribes;

rule "Regra VBLF16 - 16Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, (value == "15360") || (value == "16384")) from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLF16");
		insert($rules);
end

rule "Regra VBLF05 - 25Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "25600") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLF05");
		insert($rules);
end

rule "Regra VBLF50 - 50Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "51200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLF50");
		insert($rules);
end

rule "Regra VBLF00 - 100Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "102400") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLF00");
		insert($rules);
end

rule "Regra VBLG11 - 200Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "204800") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLG11");
		insert($rules);
end

rule "Regra VBLG13 - 300Mbps sem IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Dinamico
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "307200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLG13");
		insert($rules);
end

rule "Regra VBLG14 - 300Mbps com IP FIXO, banda larga com VOIP"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente nao tem mais que duas coberturas(Banda Larga e VoIP)
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)

		// Se de fato ha cobertura para servico VOIP
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("VOIP"))) from $inventoryEntity.customerFacingService

		// Se de fato ha cobertura para servico Banda Larga
		$customerFacingServicesBroadBand : CustomerFacingService(category != null, eval(category.equalsIgnoreCase("BROADBAND")))
				from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Apenas IP Fixo
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM")))
				from $customerFacingServicesBroadBand.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "307200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLG14");
		insert($rules);
end
