package com.tfl.oss.resourceinventory.granite.execution

import java.util.ArrayList;
import java.util.List;

import com.tlf.oss.resourceinventory.granite.core.entity.Rules;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;
import com.tlf.oss.resourceinventory.schemas.CustomerFacingService;
import com.tlf.oss.resourceinventory.schemas.ServiceDescribedBy;
import com.tlf.oss.resourceinventory.schemas.ServiceSpecCharDescribes;

rule "Regra IPSF02 - 2Mbps sem IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "2048") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF02");
		insert($rules);
end

rule "Regra IPSF04 - 4Mbps sem IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "4096") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF04");
		insert($rules);
end

rule "Regra IPSF16 - 16Mbps sem IP Fixo, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, (value == "15360") || (value == "16384")) from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF16");
		insert($rules);
end

rule "Regra IPSF05 - 25Mbps sem IP Fixo, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService
	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "25600") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF05");
		insert($rules);
end

rule "Regra IPSF50 - 50Mbps sem IP Fixo, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService
	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "51200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF50");
		insert($rules);
end

rule "Regra IPSF00 - 100Mbps sem IP Fixo, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService
	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "102400") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSF00");
		insert($rules);
end

rule "Regra IPSG11 - 200Mbps sem IP Fixo, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService
	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas DYNAMIC
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("DYNAMIC")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "204800") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("IPSG11");
		insert($rules);
end

rule "Regra VBLP00 - 100Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "102400") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP00");
		insert($rules);
end

rule "Regra VBLP05 - 25Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "25600") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP05");
		insert($rules);
end

rule "Regra VBLP11 - 200Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "204800") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP11");
		insert($rules);
end

rule "Regra VBLP14 - 300Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "307200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP14");
		insert($rules);
end

rule "Regra VBLP16 - 15Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "15360") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP16");
		insert($rules);
end

rule "Regra VBLP50 - 50Mbps com IP FIXO, banda larga com IPTV"
	agenda-group "SERVICECODE"
	when
		$rules : Rules()
		$ruleName : String()

		// Verificamos se cliente tem + de uma cobertura
		$inventoryEntity : ResourceInventoryEntity(customerFacingService.size() < 3)
		
		// Se de fato ha cobertura para servico IPTV
		CustomerFacingService(category != null, eval(category.equalsIgnoreCase("IPTV"))) from $inventoryEntity.customerFacingService

	
		// Verifica Categoria BROADBAND
		$customerFacingServices : CustomerFacingService(eval(category.equalsIgnoreCase("BROADBAND")))
				 from $inventoryEntity.customerFacingService

		// Apenas IP
		$serviceDescribedBy : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("IP"))) from $customerFacingServices.serviceDescribedBy

		// Apenas FIXED
		$serviceSpecCharDescribes : ServiceSpecCharDescribes(value != null, eval(value.equalsIgnoreCase("FIXED")))
				 from $serviceDescribedBy.serviceSpecCharDescribes

		// Obtemos descricao do Downstream se existir
		$serviceDescribedBy2 : ServiceDescribedBy(name != null, eval(name.equalsIgnoreCase("DOWNSTREAM"))) from $customerFacingServices.serviceDescribedBy

		// Obtemos o valor do Downstream se existir
		ServiceSpecCharDescribes(value != null, value == "51200") from $serviceDescribedBy2.serviceSpecCharDescribes
	then
		$rules.setResult("VBLP50");
		insert($rules);
end