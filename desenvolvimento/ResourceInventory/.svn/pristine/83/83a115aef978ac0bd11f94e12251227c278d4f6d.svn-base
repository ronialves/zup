package com.tlf.oss.resourceinventory.cpe.helper;

import javax.inject.Inject;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.EstadoRecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.RecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.ServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.enums.CpeWsName;
import com.tlf.oss.resourceinventory.cpe.enums.EstadoRecurso;
import com.tlf.oss.resourceinventory.cpe.enums.TipoRfs;
import com.tlf.oss.resourceinventory.cpe.factory.OssBusinessExceptionFactory;
import com.tlf.oss.resourceinventory.cpe.repository.EstadoRecursoLogicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.RecursoLogicoRepository;

public class AllocateHelper {

	@Inject
	private OSSLogger logger;
	
	@Inject
	private RecursoLogicoRepository recursoLogicoRepository;

	@Inject
	private EstadoRecursoLogicoRepository estadoRecursoLogicoRepository;

	public void validate(ServicoAssinante servicoAssinante) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Verificando se é uma alocação válida...");

		if (null != servicoAssinante) {
			RecursoLogico recurso = recursoLogicoRepository.findByServicoAssinanteId(servicoAssinante.getId());
			EstadoRecursoLogico estadoRecursoLogicoDesconectado = estadoRecursoLogicoRepository
			        .findByEstadoRecurso(EstadoRecurso.DESCONECTADO);

			if (null != recurso && !estadoRecursoLogicoDesconectado.getId().equals(recurso.getEstadoRecursoLogicoId())) {
				String errorCode = OssBusinessExceptionFactory.DEFAULT_ERROR_CODE;
				String errorMessage = "Designador de " + TipoRfs.fromRoiName(servicoAssinante.getTipoRfs()).getType() + " "
				        + servicoAssinante.getServiceId() + " já alocado para o Designador de Acesso "
				        + servicoAssinante.getAccessId();

				throw OssBusinessExceptionFactory.getFalloutOSSBusinessException(errorCode, errorMessage,
				        CpeWsName.ALLOCATE);
			}
		}
	}
}
