package com.tlf.oss.resourceinventory.cpe.core;

import javax.inject.Inject;
import javax.transaction.Transactional;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.CatalogoDispositivo;
import com.tlf.oss.resourceinventory.cpe.entity.DispositivoFisico;
import com.tlf.oss.resourceinventory.cpe.entity.ServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.enums.EstadoServico;
import com.tlf.oss.resourceinventory.cpe.enums.FalloutCode;
import com.tlf.oss.resourceinventory.cpe.enums.TipoRfs;
import com.tlf.oss.resourceinventory.cpe.helper.UpdateHelper;
import com.tlf.oss.resourceinventory.cpe.mapping.EntityConverter;
import com.tlf.oss.resourceinventory.cpe.repository.CategoriaDispositivoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.DispositivoFisicoRepository;
import com.tlf.oss.resourceinventory.cpe.rules.ExecutionRules;
import com.tlf.oss.resourceinventory.cpe.utils.EntityExtractor;
import com.tlf.oss.resourceinventory.cpe.validation.Update;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;

public class UpdateController {

	@Inject
	private OSSLogger logger;

	@Inject
	private DispositivoFisicoRepository dispositivoFisicoRepository;

	@Inject
	private EntityConverter entityConverter;

	@Inject
	private CategoriaDispositivoRepository categoriaDispositivoRepository;

	@Inject
	private ExecutionRules rules;

	@Inject
	private UpdateHelper helper;

	@Transactional(rollbackOn = OSSBusinessException.class)
	public ResourceInventoryEntity update(@Update ResourceInventoryEntity entity) throws OSSBusinessException {
		try {
			logger.log(OSSLogger.INFO, "Iniciando o update no CPE...");

			ServicoAssinante servicoAssinante = entityConverter.toServicoAssinante(entity,
					EstadoServico.EM_APROVISIONAMENTO);
			DispositivoFisico dispositivoFisico = dispositivoFisicoRepository
					.findByServiceId(servicoAssinante.getServiceId());

			if (null != dispositivoFisico) {
				if (isSelfProvisioning(entity)) {
					String macAddress = EntityExtractor.extractMacAddress(entity).get().getValue();
					String defineNomeCategoria = rules.defineNomeCategoria(entity);
					String serialNumber = EntityExtractor.extractSerialNumber(entity).get().getValue();

					Integer categoriaDispositivoId = categoriaDispositivoRepository
							.findByNomeCategoria(defineNomeCategoria).getId();

					CatalogoDispositivo equipment = helper.getCatalogoDispositivo(entity);

					dispositivoFisico.setCategoriaDispositivoCorrente(categoriaDispositivoId);
					dispositivoFisico.setMacAddress(macAddress);
					dispositivoFisico.setCatalagoDispositivoId(equipment.getId());
					dispositivoFisico.setNumeroSerial(serialNumber);
				} else {
					dispositivoFisico
							.setNumeroSerialGpon(EntityExtractor.extractGponSerialNumber(entity).get().getValue());
				}

				dispositivoFisicoRepository.update(dispositivoFisico);

				logger.log(OSSLogger.INFO, "Finalizando o update no CPE...");
			} else {
				throw new OSSBusinessException(FalloutCode.RICPE_003.getDescription(), FalloutCode.RICPE_003.getValue(),
						"NÃ£o foi encontrado um cliente com o serviceID: " + servicoAssinante.getServiceId());
			}
		} catch (OSSBusinessException e) {
			logger.log(OSSLogger.ERROR, e.getMessage());
			throw e;
		} catch (Exception e) {
			logger.error(e.getMessage(), e);

			throw new OSSBusinessException(FalloutCode.RICPE_999.getDescription(), FalloutCode.RICPE_999.getValue(),
					e.getMessage());
		}

		return entity;
	}

	private boolean isSelfProvisioning(ResourceInventoryEntity entity) {
		return !TipoRfs.ACCESS_PORT.getRoiName().equalsIgnoreCase(EntityExtractor.extractResourceOrderItemName(entity));
	}
}
