package com.tlf.oss.resourceinventory.granite.core;

import java.io.Serializable;
import java.util.List;
import java.util.Optional;

import javax.inject.Inject;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.resourceinventory.granite.core.entity.RetrieveFacilityEntity;
import com.tlf.oss.resourceinventory.granite.core.enums.Code;
import com.tlf.oss.resourceinventory.granite.core.enums.EntityFields;
import com.tlf.oss.resourceinventory.granite.core.enums.Message;
import com.tlf.oss.resourceinventory.granite.core.enums.StatusFacilityType;
import com.tlf.oss.resourceinventory.granite.core.enums.StatusPathType;
import com.tlf.oss.resourceinventory.granite.core.mapper.impl.RetrieveResourceMapper;
import com.tlf.oss.resourceinventory.granite.core.repository.RetrieveFacilityDao;
import com.tlf.oss.resourceinventory.granite.core.validation.ValidatorEntity;
import com.tlf.oss.resourceinventory.schemas.Resource;
import com.tlf.oss.resourceinventory.schemas.ResourceFacingService;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;

public class FacilityResourceMetallicController extends ValidatorEntity implements Serializable {
	private static final long serialVersionUID = 1L;

	@Inject
	public RetrieveFacilityDao rdao;

	@Inject
	private RetrieveResourceMapper mapper;

	public ResourceInventoryEntity resourceFacility(ResourceInventoryEntity entity) throws OSSBusinessException {
		RetrieveFacilityEntity retrieveFacilityEntity = getFacility(entity);
		entity = mapper.parseGetPhysicalResourceFacility(retrieveFacilityEntity, entity);
		return entity;
	}

	private RetrieveFacilityEntity getRetrieveFacilityResourceEntity(ResourceInventoryEntity entity)
			throws OSSBusinessException {
		RetrieveFacilityEntity retrieveFacilityEntity = new RetrieveFacilityEntity();
		retrieveFacilityEntity.setTerminal(getNetworkOwnerID(entity));
		return retrieveFacilityEntity;
	}

	protected String getNetworkOwnerID(ResourceInventoryEntity entity) throws OSSBusinessException {
		ResourceFacingService rfsTerminal = getResourceFacingService(entity, EntityFields.NETWORK_OWNER_ID.getValue());
		return rfsTerminal.getServiceDescribedBy().get(0).getServiceSpecCharDescribes().get(0).getValue();
	}

	public RetrieveFacilityEntity getFacility(ResourceInventoryEntity entity) throws OSSBusinessException {

		RetrieveFacilityEntity retrieveFacilityEntity = getRetrieveFacilityResourceEntity(entity);

		return getStateFacility(entity, retrieveFacilityEntity);
	}

	/**
	 * Metodo responsavel em valdiar as regras de negocio da consulta facilidade
	 * Caso busque por ACTIVE e nao encontre as facilidade do cliente ATIVO retorna erro
	 * Caso busque por NEW e nao encontre as facilidade do cliente RESERVADO e EM CONFIGURACAO retorna erro
	 * Caso Contrario não seja informado o tipo do path, retorna o que encontrar, caso nao encontre, retorna erro
	 * @param entity
	 * @param retrieveFacilityEntity
	 * @return
	 * @throws OSSBusinessException
	 */
	private RetrieveFacilityEntity getStateFacility(ResourceInventoryEntity entity,RetrieveFacilityEntity retrieveFacilityEntity) throws OSSBusinessException{
		RetrieveFacilityEntity retrieveFacility = null;
		List<RetrieveFacilityEntity> retrieveFacilityList = rdao.getfacility(retrieveFacilityEntity);

		//Sempre recupera as facilidades,
		//na versão 1 do retrieve não existe a TAG resource, portanto deve-se buscar o primeiro path encontrado.
		//a versão 1 atende apenas os cenários de venda - onde existe apenas 1 path no granite.
		
		Optional<Resource> resource = Optional.ofNullable(entity.getResource());

		if (!resource.isPresent()) {
			
			retrieveFacility = retrieveFacilityList.stream().findFirst().get();
			
		}else{
			
			if (StatusFacilityType.ACTIVE.getValue().equalsIgnoreCase(entity.getResource().getStateOfResource())) {

				retrieveFacility = retrieveFacilityList.stream().filter(p -> p.getStatus().equalsIgnoreCase(StatusPathType.ACTIVE.getValue()))
						.findFirst()
						.orElseThrow(() -> new OSSBusinessException(
								Message.ERRO_RESOURCE_RETRIEVE_PATH_BY_TERMINAL.getValue(), Code.RIGRANITE_003.getValue(),
								Message.ERRO_RESOURCE_RETRIEVE_PATH.getValue() +" active: " + StatusPathType.ACTIVE.getValue()+" não encontrado"));

			} else if (StatusFacilityType.NEW.getValue().equalsIgnoreCase(entity.getResource().getStateOfResource())) {

				retrieveFacility = retrieveFacilityList.stream().filter((p) -> 
				p.getStatus().equalsIgnoreCase(StatusPathType.RESERVED.getValue())||
				p.getStatus().equalsIgnoreCase(StatusPathType.IN_CONFIGURATION.getValue()))
						.findFirst()
						.orElseThrow(() -> new OSSBusinessException(
								Message.ERRO_RESOURCE_RETRIEVE_PATH_BY_TERMINAL.getValue(), Code.RIGRANITE_003.getValue(),
								Message.ERRO_RESOURCE_RETRIEVE_PATH.getValue()+" new: " + StatusPathType.RESERVED.getValue()+" e "+StatusPathType.IN_CONFIGURATION.getValue()+" não encontrado"));

			}
		}

		return retrieveFacility;
	}	
}