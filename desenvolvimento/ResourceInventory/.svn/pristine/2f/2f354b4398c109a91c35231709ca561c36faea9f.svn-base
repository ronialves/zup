package com.tlf.oss.resourceinventory.cpe.core;

import javax.inject.Inject;
import javax.transaction.Transactional;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.DispositivoFisico;
import com.tlf.oss.resourceinventory.cpe.entity.EstadoServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.entity.RecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.ServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.enums.EstadoServico;
import com.tlf.oss.resourceinventory.cpe.enums.FalloutCode;
import com.tlf.oss.resourceinventory.cpe.enums.RoiAction;
import com.tlf.oss.resourceinventory.cpe.enums.TipoRfs;
import com.tlf.oss.resourceinventory.cpe.mapping.EntityConverter;
import com.tlf.oss.resourceinventory.cpe.repository.DispositivoFisicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.EstadoServicoAssinanteRepository;
import com.tlf.oss.resourceinventory.cpe.repository.RecursoLogicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.ServicoAssinanteRepository;
import com.tlf.oss.resourceinventory.cpe.utils.EntityExtractor;
import com.tlf.oss.resourceinventory.cpe.validation.Allocate;
import com.tlf.oss.resourceinventory.schemas.ResourceFacingService;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;

public class AllocateController {

	@Inject
	private OSSLogger logger;

	@Inject
	private ServicoAssinanteRepository servicoAssinanteRepository;

	@Inject
	private DispositivoFisicoRepository dispositivoFisicoRepository;

	@Inject
	private RecursoLogicoRepository recursoLogicoRepository;

	@Inject
	private EntityConverter entityConverter;

	@Inject
	EstadoServicoAssinanteRepository estadoServicoAssinanteRepository;

	@Transactional(rollbackOn = OSSBusinessException.class)
	public ResourceInventoryEntity allocate(@Allocate ResourceInventoryEntity entity) throws OSSBusinessException {
		try {
			logger.log(OSSLogger.INFO, "Iniciando o allocate no CPE...");

			String roiAction = EntityExtractor.extractResourceOrderItemAction(entity);

			if (roiAction == null || roiAction.isEmpty() || roiAction.equalsIgnoreCase(RoiAction.PROVIDE.getAction()) || roiAction.equalsIgnoreCase(RoiAction.ADD.getAction())) {

				ServicoAssinante servicoAssinante = entityConverter.toServicoAssinante(entity, EstadoServico.EM_APROVISIONAMENTO);
				DispositivoFisico dispositivoFisico = dispositivoFisicoRepository.findByAccessId(servicoAssinante.getAccessId());

				if (null == dispositivoFisico
						|| TipoRfs.STB.getRoiName().equalsIgnoreCase(servicoAssinante.getTipoRfs())) {
					dispositivoFisico = entityConverter.toDispositivoFisico(entity);
					dispositivoFisicoRepository.create(dispositivoFisico);
				}

				servicoAssinanteRepository.create(servicoAssinante);

				RecursoLogico recursoLogico = entityConverter.toRecursoLogico(dispositivoFisico, servicoAssinante);
				recursoLogicoRepository.create(recursoLogico);

			} else if (roiAction.equalsIgnoreCase(RoiAction.MODIFY.getAction())) {
				ServicoAssinante servicoAssinante = servicoAssinanteRepository.findByServiceId(entity);
				String numberCease = null;

				if (null != servicoAssinante) {
					ResourceFacingService rfsCease = EntityExtractor.extractTelephoneRfs(entity, RoiAction.CEASE).get();
					numberCease = EntityExtractor.extractTelephoneNumber(rfsCease);

					if (servicoAssinante.getNumeroTelefone().equals(numberCease)) {

						ResourceFacingService rfsProvide = EntityExtractor.extractTelephoneRfs(entity, RoiAction.PROVIDE).get();
						String numberProvide = EntityExtractor.extractTelephoneNumber(rfsProvide);
						servicoAssinante.setNumeroTelefone(numberProvide);

						EstadoServicoAssinante estadoServicoAssinante = estadoServicoAssinanteRepository
								.findByEstadoServico(EstadoServico.EM_APROVISIONAMENTO);
						servicoAssinante.setEstadoServicoAssinanteId(estadoServicoAssinante.getId());

						servicoAssinanteRepository.update(servicoAssinante);

					} else {
						throw new OSSBusinessException(FalloutCode.RICPE_003.getDescription(),
								FalloutCode.RICPE_003.getValue(),
								"O número de telefone não é o mesmo que está sendo enviado para desconexão "
										+ EntityExtractor.extractServiceId(entity));
					}

				} else {
					throw new OSSBusinessException(FalloutCode.RICPE_003.getDescription(),
							FalloutCode.RICPE_003.getValue(),
							"Nenhum recurso encontrado para o serviceId " + EntityExtractor.extractServiceId(entity));
				}

			} else {
				throw new OSSBusinessException(FalloutCode.RICPE_003.getDescription(),
						FalloutCode.RICPE_003.getValue(),
						"Ação inválida no ResourceOrder "
								+ roiAction);
			}

			logger.log(OSSLogger.INFO, "Finalizando o allocate no CPE...");

		} catch (Exception e) {
			logger.log(OSSLogger.ERROR, e.getMessage());

			throw new OSSBusinessException(FalloutCode.RICPE_999.getDescription(), FalloutCode.RICPE_999.getValue(),
					e.getMessage());
		}

		return entity;
	}
}
