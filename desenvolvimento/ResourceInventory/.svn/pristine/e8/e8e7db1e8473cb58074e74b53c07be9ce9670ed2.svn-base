package com.tlf.oss.resourceinventory.netcool.repository;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.inject.Inject;
import javax.persistence.NoResultException;
import javax.persistence.NonUniqueResultException;
import javax.persistence.ParameterMode;
import javax.persistence.PersistenceException;
import javax.persistence.QueryTimeoutException;
import javax.persistence.StoredProcedureQuery;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.schemas.AtomicNetworkAddress;
import com.tlf.oss.resourceinventory.schemas.Equipment;
import com.tlf.oss.resourceinventory.schemas.IPAddress;
import com.tlf.oss.resourceinventory.schemas.NetworkAddressAssociation;
import com.tlf.oss.resourceinventory.schemas.PhysicalResource;
import com.tlf.oss.resourceinventory.schemas.PortAdapterCard;
import com.tlf.oss.resourceinventory.schemas.ServiceDescribedBy;
import com.tlf.oss.resourceinventory.schemas.ServiceSpecCharDescribes;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;
import com.tlf.oss.resourceinventory.netcool.entity.EquipmentRetrievalEntity;
import com.tlf.oss.resourceinventory.netcool.enums.ExceptionInfoEnum;
import com.tlf.oss.resourceinventory.netcool.repository.factory.GenericRepository;
import com.tlf.oss.resourceinventory.netcool.core.utils.Constants;

public class EquipmentRetrievalRepository extends GenericRepository{
	
	/**
	 * Executa Procedure para consultar os ids dos equipamentos
	 * 
	 * @param entity
	 * @return {@link ResourceInventoryEntity}
	 * @throws OSSBusinessException 
	 */
	
	private static final long serialVersionUID = -8033484033628300825L;
	
	@Inject
	private OSSLogger logger;
	
	private final String PROC_GET_ELEMENTS = "NETCOOL.SP_GET_ELEMENTS_NETCOOL";
	
	
	/**
	 * Executa Procedure para consultar equipamentos no Netcool
	 * 
	 * @param entity
	 * @return {@link ResourceInventoryEntity}
	 * @throws OSSBusinessException 
	 */
	@SuppressWarnings("unchecked")
	public ResourceInventoryEntity getEquipment(ResourceInventoryEntity entity) throws OSSBusinessException{
		logger.log(OSSLogger.INFO, this.getClass().getName() + " -  executando procedure " + PROC_GET_ELEMENTS);
		
		List<EquipmentRetrievalEntity> resultList = new ArrayList<>();
		Integer codRetorno = null;
		String msgRetorno = "";
		
		try {
			
			if(entity.getEquipment() == null || entity.getEquipment().isEmpty()) {
				logger.log(OSSLogger.INFO, "Lista de equipamentos vazia!");
				return entity;
			}
			
			for (Equipment equipment : entity.getEquipment()) {				
			
				logger.log(OSSLogger.INFO, this.getClass().getName() + " -  executando procedure " + PROC_GET_ELEMENTS + " para o equipamento: " + equipment.getName());
				
				StoredProcedureQuery procedureQuery = getFactory().createStoredProcedureQuery(PROC_GET_ELEMENTS);
				
				procedureQuery.registerStoredProcedureParameter(Constants.P_CITY_NAME, String.class, ParameterMode.IN);
				procedureQuery.registerStoredProcedureParameter(Constants.P_EQUIPMENT, String.class, ParameterMode.IN);
	            procedureQuery.registerStoredProcedureParameter(Constants.CURSOR, void.class, ParameterMode.REF_CURSOR);
	            procedureQuery.registerStoredProcedureParameter(Constants.P_COD_RETORNO, Integer.class, ParameterMode.OUT);
	            procedureQuery.registerStoredProcedureParameter(Constants.P_MSG_RETORNO, String.class, ParameterMode.OUT);
	            
				procedureQuery.setParameter("P_CITY_NAME", getParamValue(entity, Constants.NETWORK_OWNER_VIVO2, Constants.CNL_ACRONYM));
				procedureQuery.setParameter("P_EQUIPMENT", equipment.getName());
	            
	            procedureQuery.execute();
	            
	            resultList.addAll(castToEquipmentRetrievalEntity((List<Object[]>) procedureQuery.getOutputParameterValue(Constants.CURSOR)));
				codRetorno = (Integer) procedureQuery.getOutputParameterValue("P_COD_RETORNO");
				msgRetorno = (String) procedureQuery.getOutputParameterValue("P_MSG_RETORNO");
				logger.log(OSSLogger.INFO, "getEquipment codRetorno: " + codRetorno);
				logger.log(OSSLogger.INFO, "getEquipment msgRetorno: " + msgRetorno);
	            
	            logger.log(OSSLogger.INFO, this.getClass().getName() + " -  procedure "+ PROC_GET_ELEMENTS + " executada com sucesso para o equipamento: " + equipment.getName());			
			}
			
		} catch (QueryTimeoutException | NoResultException | NonUniqueResultException e) {
			throw new OSSBusinessException(ExceptionInfoEnum.RITBS_002.getDescription(),
					ExceptionInfoEnum.RITBS_002.getCode(), String.format(ExceptionInfoEnum.RITBS_002.getMessage(),
							"Erro ao chamar a procedure SP_GET_ELEMENTS_NETCOOL no Netcool", e.getMessage()));

		} catch (PersistenceException e) {
			throw new OSSBusinessException(ExceptionInfoEnum.RITBS_002.getDescription(),
					ExceptionInfoEnum.RITBS_002.getCode(), String.format(ExceptionInfoEnum.RITBS_002.getMessage(),
							"Erro ao chamar a procedure SP_GET_ELEMENTS_NETCOOL no Netcool", e.getMessage()));

		} catch (Exception e) {
			logger.log(OSSLogger.ERROR, "ERROR: " + e);
			throw new OSSBusinessException(ExceptionInfoEnum.RITBS_999.getDescription(),
					ExceptionInfoEnum.RITBS_999.getCode(), e.getMessage());
		}		
		
		equipmentMapperWithHasCards(entity, codRetorno, msgRetorno, resultList);
		
		return entity;
		
	}
	
	/**
	 * Recupera os valores da proc e passa para o entity na tag equipment
	 * 
	 * @param entity
	 * @param codRetorno
	 * @param msgRetorno
	 * @param resultQuery
	 */
	private void equipmentMapperWithHasCards(ResourceInventoryEntity entity, Integer codRetorno,
			String msgRetorno, List<EquipmentRetrievalEntity> resultQuery) {

		if (resultQuery != null && !resultQuery.isEmpty() && entity.getEquipment() != null) {

			for (Equipment equipmentFromEntity : entity.getEquipment()) {

				for (EquipmentRetrievalEntity resultEquipment : resultQuery) {

					PhysicalResource physicalResource = new PhysicalResource();
					physicalResource.setTypeOfResource(resultEquipment.getEquipmentType());

					List<IPAddress> ipAddressList = new ArrayList<>();
					IPAddress ipAddress = new IPAddress();
					ipAddress.setNetworkNumber(resultEquipment.getIp());
					ipAddressList.add(ipAddress);

					AtomicNetworkAddress atomicNetworkAddress = new AtomicNetworkAddress();
					atomicNetworkAddress.setHostname(resultEquipment.getIntface());

					NetworkAddressAssociation networkAddressAssociation = new NetworkAddressAssociation();
					networkAddressAssociation.setIpAddressList(ipAddressList);
					networkAddressAssociation.setAtomicNetworkAddress(atomicNetworkAddress);
					physicalResource.setNetworkAddressAssociation(networkAddressAssociation);

					PortAdapterCard portAdapterCard = new PortAdapterCard();
					portAdapterCard.setId(String.valueOf(resultEquipment.getEquipmentId()));
					portAdapterCard.setName(resultEquipment.getHost());
					portAdapterCard.setPhysicalResource(physicalResource);
					portAdapterCard.setVendor(resultEquipment.getSupplier());
					portAdapterCard.setModel(resultEquipment.getModel());
					portAdapterCard.setNotes(resultEquipment.getDescription());

					if (equipmentFromEntity.getHasCards() != null) {
						equipmentFromEntity.getHasCards().add(portAdapterCard);
					} else {
						equipmentFromEntity.setHasCards(Arrays.asList(portAdapterCard));
					}

				}
			}
			
			entity.setCodeReturn(codRetorno);
			entity.setMessageReturn(msgRetorno);
		}

	}
	
	/**
	 * Realizar um parse do retorno da proc para o objeto EquipmentRetrievalEntity
	 * @param outputParameterValue
	 * @return
	 */
	private List<EquipmentRetrievalEntity> castToEquipmentRetrievalEntity(List<Object[]> outputParameterValue) {
		
		List<EquipmentRetrievalEntity> result = new ArrayList<>();
		
		for (Object[] objects : outputParameterValue) {
			EquipmentRetrievalEntity entity = new EquipmentRetrievalEntity();
			entity.setName(objectToString(objects[0]));
			entity.setHost(objectToString(objects[1]));
			entity.setEquipmentType(objectToString(objects[2]));
			entity.setIp(objectToString(objects[3]));
			entity.setSupplier(objectToString(objects[4]));
			entity.setAcronymCity(objectToString(objects[5]));
			entity.setDescription(objectToString(objects[6]));
			logger.log(OSSLogger.INFO, "castToEquipmentRetrievalEntity - entity: " + entity);
			result.add(entity);
		}
		
		return result;
	}
	
	/**
	 * Transforma o valor do objeto da procedure em String
	 * @param in
	 * @return
	 */
	private String objectToString(Object in) {
		String result = "";
		if (in != null ) {
			result = String.valueOf(in);
		}
		return result;
	}
	
	/**
	 * Retorna o valor do Par√¢metro do ServiceDescribedBy.
	 * 
	 * @param entity
	 * @param networkOwner
	 * @param paramName
	 * @return
	 */
	private String getParamValue(ResourceInventoryEntity entity, String networkOwner, String paramName) {
		
		for (ServiceDescribedBy sdb : entity.getResourceFacingService().getServiceDescribedBy()) {			
			if (networkOwner.equalsIgnoreCase(sdb.getName())) {				
				for (ServiceSpecCharDescribes sscd : sdb.getServiceSpecCharDescribes()) {					
					if (paramName.equalsIgnoreCase(sscd.getValueType())) {
						logger.log(OSSLogger.INFO, "EquipmentRetrievalRepository - getParamValue - " + paramName + " : " + sscd.getValue());
						return sscd.getValue();
					}					
				}
			}
		}
		
		return null;
	}
	
}
