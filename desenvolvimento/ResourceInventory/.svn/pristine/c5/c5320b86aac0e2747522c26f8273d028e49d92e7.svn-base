package com.tlf.oss.resourceinventory.cpe.core;

import javax.inject.Inject;
import javax.transaction.Transactional;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.DispositivoFisico;
import com.tlf.oss.resourceinventory.cpe.entity.EstadoRecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.RecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.ServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.enums.CpeWsName;
import com.tlf.oss.resourceinventory.cpe.enums.FalloutCode;
import com.tlf.oss.resourceinventory.cpe.enums.TipoRfs;
import com.tlf.oss.resourceinventory.cpe.enums.EstadoRecurso;
import com.tlf.oss.resourceinventory.cpe.factory.OssBusinessExceptionFactory;
import com.tlf.oss.resourceinventory.cpe.repository.DispositivoFisicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.EstadoRecursoLogicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.RecursoLogicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.ServicoAssinanteRepository;
import com.tlf.oss.resourceinventory.cpe.utils.EntityExtractor;
import com.tlf.oss.resourceinventory.cpe.validation.Uninstall;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;

public class UninstallController {

	@Inject
	private OSSLogger logger;

	@Inject
	private ServicoAssinanteRepository servicoAssinanteRepository;

	@Inject
	private RecursoLogicoRepository recursoLogicoRepository;

	@Inject
	private DispositivoFisicoRepository dispositivoFisicoRepository;
	
	@Inject
	private EstadoRecursoLogicoRepository estadoRecursoLogicoRepository;
	
	@Transactional(rollbackOn=OSSBusinessException.class)
	public ResourceInventoryEntity uninstall(@Uninstall final ResourceInventoryEntity entity) throws OSSBusinessException {
		try {
			logger.log(OSSLogger.INFO, "Iniciando o Uninstall no CPE...");

			final ServicoAssinante servicoAssinante = servicoAssinanteRepository.findByServiceId(entity);
			if(servicoAssinante == null) {
				final String serviceId = EntityExtractor.extractServiceId(entity) != null ? EntityExtractor.extractServiceId(entity) : EntityExtractor.extractAccessId(entity);
				throw OssBusinessExceptionFactory.getFalloutOSSBusinessException(OssBusinessExceptionFactory.DEFAULT_ERROR_CODE, 
						"Não foi encontrado um cliente com o Designador de "
							.concat(TipoRfs.fromRoiName(EntityExtractor.extractResourceOrderItemName(entity)).getType()).concat(" ").concat(serviceId),
						CpeWsName.UNINSTALL);
			}

			final RecursoLogico recursoLogico = recursoLogicoRepository.findByServicoAssinanteId(servicoAssinante.getId());

			final DispositivoFisico dispositivoFisico = dispositivoFisicoRepository
					.findById(recursoLogico.getDispositivoFisicoId());
			
			final EstadoRecursoLogico estadoRecursoLogico = estadoRecursoLogicoRepository.findByEstadoRecurso(EstadoRecurso.DESCONECTADO);
			 
			if (!estadoRecursoLogico.getId().equals(recursoLogico.getEstadoRecursoLogicoId())) {
			   throw new OSSBusinessException(FalloutCode.RICPE_003.getDescription(), FalloutCode.RICPE_003.getValue(),
			         "Nenhum recurso lógico encontrado para remoção com o serviceId " + EntityExtractor.extractServiceId(entity));
			}
			
			recursoLogicoRepository.delete(recursoLogico);
			
			servicoAssinanteRepository.delete(servicoAssinante);
			
			if(!hasDispositivoFisicoChildren(dispositivoFisico)) {
				dispositivoFisicoRepository.delete(dispositivoFisico);
			}

			logger.log(OSSLogger.INFO, "Finalizando o Uninstall no CPE...");
		} catch (OSSBusinessException oss) {
			logger.error(oss.getMessage(), oss);
			throw oss;
		}
		catch (Exception e) {
			logger.error(e.getMessage(), e);

			throw new OSSBusinessException(FalloutCode.RICPE_999.getDescription(),
										   FalloutCode.RICPE_999.getValue(),
										   e.getMessage());
		}

		return entity;
	}
	
	private boolean hasDispositivoFisicoChildren(final DispositivoFisico df) throws OSSBusinessException {
		return recursoLogicoRepository.findByDispositivoFisicoId(df.getId()) != null;
	}
}
