package com.tlf.oss.resourceinventory.cpe.repository;

import java.util.List;
import java.util.Optional;

import javax.inject.Inject;
import javax.persistence.Query;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.CatalogoDispositivo;
import com.tlf.oss.resourceinventory.cpe.entity.DispositivoFisico;
import com.tlf.oss.resourceinventory.cpe.entity.RecursoLogico;
import com.tlf.oss.resourceinventory.cpe.repository.factory.GenericRepository;

public class DispositivoFisicoRepository extends GenericRepository {

	@Inject
	private OSSLogger logger;

	public <T> void create(DispositivoFisico entity) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Criando registro na tabela DispositivoFisico: " + entity);

		super.create(entity);
	}

	public <T> void update(DispositivoFisico entity) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Atualizando o registro na tabela DispositivoFisico: " + entity);

		super.update(entity);
	}

	public <T> void delete(DispositivoFisico entity) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Excluindo o registro na tabela DispositivoFisico: " + entity);

		if (!hasChildren(entity)) {

			super.delete(entity);

		} else {

			logger.log(OSSLogger.INFO, "Contem registros filhos");

		}

	}

	@SuppressWarnings("unchecked")
	public List<DispositivoFisico> listByServiceId(String serviceId) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Buscando registros na tabela DispositivoFisico para o serviceId = " + serviceId);

		Query query = factory.createQuery(
				"SELECT df FROM ServicoAssinante sa INNER JOIN RecursoLogico rl ON (sa.id = rl.servicoAssinanteId) INNER JOIN DispositivoFisico df ON (df.id = rl.dispositivoFisicoId) WHERE UPPER(sa.serviceId) = ?1");

		query.setParameter(1, serviceId.toUpperCase());

		return query.getResultList();
	}

	public DispositivoFisico findById(Integer id) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Buscando o registro na tabela DispositivoFisico com id: " + id);

		return super.findById(DispositivoFisico.class, id);
	}

	@SuppressWarnings(value = "unchecked")
	public DispositivoFisico findByServiceId(String serviceId) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Buscando registro na tabela DispositivoFisico para o serviceId = " + serviceId);

		Query query = factory.createQuery(
				"SELECT df FROM ServicoAssinante sa INNER JOIN RecursoLogico rl ON (sa.id = rl.servicoAssinanteId) INNER JOIN DispositivoFisico df ON (df.id = rl.dispositivoFisicoId) WHERE UPPER(sa.serviceId) = ?1");

		query.setParameter(1, serviceId);

		List<DispositivoFisico> servicoAssinante = query.getResultList();

		return servicoAssinante.isEmpty() ? null : servicoAssinante.get(0);
	}

	@SuppressWarnings("unchecked")
	public DispositivoFisico findByAccessId(String accessId) throws OSSBusinessException {

		logger.log(OSSLogger.INFO, "Buscando registro na tabela DispositivoFisico para o accessId = " + accessId);

		Query query = factory.createQuery(
				"SELECT df FROM ServicoAssinante sa INNER JOIN RecursoLogico rl ON (sa.id = rl.servicoAssinanteId) INNER JOIN DispositivoFisico df ON (df.id = rl.dispositivoFisicoId) WHERE UPPER(sa.accessId) = ?1");
		query.setParameter(1, accessId);

		List<DispositivoFisico> servicoAssinante = query.getResultList();

		return servicoAssinante.isEmpty() ? null : servicoAssinante.get(0);
	}

	@SuppressWarnings("unchecked")
	public boolean hasChildren(DispositivoFisico dispositivoFisico) {

		boolean result = false;

		if (null != dispositivoFisico) {

			logger.log(OSSLogger.INFO, "Buscando registro na tabela RecursoLogico para o DispositivoFisico ID = "
					+ dispositivoFisico.getId());

			Query query = factory.createQuery("SELECT rl from RecursoLogico rl WHERE rl.dispositivoFisicoId = ?1");

			query.setParameter(1, dispositivoFisico.getId());

			List<RecursoLogico> recursosLogicos = query.getResultList();

			return (!recursosLogicos.isEmpty() && null != recursosLogicos);
		}
		return result;
	}

	@SuppressWarnings("unchecked")
	public Optional<DispositivoFisico> findByMacaddress(String macaddress) {
		logger.log(OSSLogger.INFO, "Buscando registro na tabela DispositivoFisico para o macAddress = " + macaddress);

		Query query = factory.createQuery("SELECT df from DispositivoFisico df WHERE df.macAddress = ?1");

		query.setParameter(1, macaddress);

		List<DispositivoFisico> list = query.getResultList();

		return list.stream().findFirst();
	}

	@SuppressWarnings("unchecked")
	public Optional<DispositivoFisico> findBySerialNumber(String serialNumber) {
		logger.log(OSSLogger.INFO,
				"Buscando registro na tabela DispositivoFisico para o numeroSerial = " + serialNumber);

		Query query = factory.createQuery("SELECT df from DispositivoFisico df WHERE df.numeroSerial = ?1");

		query.setParameter(1, serialNumber);

		List<DispositivoFisico> list = query.getResultList();

		return list.stream().findFirst();
	}

	@SuppressWarnings("unchecked")
	public Optional<DispositivoFisico> findByCatalogo(CatalogoDispositivo catalogo) {
		logger.log(OSSLogger.INFO, "Buscando registro na tabela DispositivoFisico para o catalogo = " + catalogo);

		Integer catalogoId = catalogo.getId();
		if (null != catalogoId) {
			Query query = factory
					.createQuery("SELECT df from DispositivoFisico df WHERE df.catalagoDispositivoId = ?1");
			query.setParameter(1, catalogoId);

			List<DispositivoFisico> dispositivoFisicos = query.getResultList();
			if (null != dispositivoFisicos) {
				return dispositivoFisicos.stream().findFirst();
			}
		}
		return Optional.ofNullable(null);
	}
}
