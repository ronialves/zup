package com.tlf.oss.resourceinventory.cpe.core;

import javax.inject.Inject;

import com.tlf.oss.common.exception.OSSBusinessException;
import com.tlf.oss.common.log.OSSLogger;
import com.tlf.oss.resourceinventory.cpe.entity.DispositivoFisico;
import com.tlf.oss.resourceinventory.cpe.entity.RecursoLogico;
import com.tlf.oss.resourceinventory.cpe.entity.ServicoAssinante;
import com.tlf.oss.resourceinventory.cpe.enums.FalloutCode;
import com.tlf.oss.resourceinventory.cpe.repository.DispositivoFisicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.RecursoLogicoRepository;
import com.tlf.oss.resourceinventory.cpe.repository.ServicoAssinanteRepository;
import com.tlf.oss.resourceinventory.cpe.validation.Uninstall;
import com.tlf.oss.resourceinventory.schemas.api.ResourceInventoryEntity;

public class UninstallController {

	@Inject
	private OSSLogger logger;

	@Inject
	private ServicoAssinanteRepository servicoAssinanteRepository;

	@Inject
	private RecursoLogicoRepository recursoLogicoRepository;

	@Inject
	private DispositivoFisicoRepository dispositivoFisicoRepository;

	public ResourceInventoryEntity uninstall(@Uninstall final ResourceInventoryEntity entity) throws OSSBusinessException {
		try {
			logger.log(OSSLogger.INFO, "Iniciando o Uninstall no CPE...");

			final ServicoAssinante servicoAssinante = servicoAssinanteRepository.findByServiceId(entity);

			final RecursoLogico recursoLogico = recursoLogicoRepository.findByServicoAssinanteId(servicoAssinante.getId());

			final DispositivoFisico dispositivoFisico = dispositivoFisicoRepository
					.findById(recursoLogico.getDispositivoFisicoId());
			
			recursoLogicoRepository.delete(recursoLogico);
			
			servicoAssinanteRepository.delete(servicoAssinante);
			
			if(!hasDispositivoFisicoChildren(dispositivoFisico)) {
				dispositivoFisicoRepository.delete(dispositivoFisico);
			}

			logger.log(OSSLogger.INFO, "Finalizando o Uninstall no CPE...");
		} catch (Exception e) {
			logger.log(OSSLogger.ERROR, e.getMessage());

			throw new OSSBusinessException(FalloutCode.RICPE_999.getDescription(),
										   FalloutCode.RICPE_999.getValue(),
										   e.getMessage());
		}

		return entity;
	}
	
	private boolean hasDispositivoFisicoChildren(final DispositivoFisico df) throws OSSBusinessException {
		return recursoLogicoRepository.findByDispositivoFisicoId(df.getId()) != null;
	}
}
